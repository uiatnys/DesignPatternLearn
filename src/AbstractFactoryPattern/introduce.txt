介绍：
抽象工厂模式也是创建型设计模式之一。抽象工厂模式起源于以前对不同操作系统的图形化解决方案，如不同操作系统的按钮和文本控件其实现不同，展示效果也不一样，对于每一个操作系统，
其本身就构成一个产品类，而按钮与文本框控件也构成一个产品类，两种产品类两种变化，各自有自己的特性，如Android中的Button和TextView，IOS中的Button和TextView。
定义：
为创建一组相关或者是相互依赖的对象提供一个接口，而不需要指定他们的具体类。
使用场景：
一个对象族有相同的约束时可以使用抽象工厂模式。

==========================================================================================================================================================

抽象工厂与工厂模式的区别：

首先来看看这两者的定义区别：
工厂模式：定义一个用于创建对象的借口，让子类决定实例化哪一个类
抽象工厂模式：为创建一组相关或相互依赖的对象提供一个接口，而且无需指定他们的具体类

个人觉得这个区别在于产品，如果产品单一，最合适用工厂模式，但是如果有多个业务品种、业务分类时，通过抽象工厂模式产生需要的对象是一种非常好的解决方式。再通俗深化理解下：
 工厂模式针对的是一个产品等级结构 ，抽象工厂模式针对的是面向多个产品等级结构的。

工厂方法模式：
针对的是一个产品等级结构
一个抽象产品类
可以派生出多个具体产品类
一个抽象工厂类，可以派生出多个具体工厂类
每个具体工厂类只能创建一个具体产品类的实例

抽象工厂模式：
针对的是面向多个产品等级结构
多个抽象产品类
每个抽象产品类可以派生出多个具体产品类
一个抽象工厂类，可以派生出多个具体工厂类
每个具体工厂类可以创建多个具体产品类的实例
