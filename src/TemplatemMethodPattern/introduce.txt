模板方法模式：
在面向对象开发过程中，通常会遇到这样的一个问题，我们知道一个算法所需的关键步骤，并确定了这些步骤的执行顺序，但是，某些步骤的具体实现是未知的，或者说某些步骤的实现是会随着环境
的变化而改变的，例如，执行程序的流程大致如下：
1、检查代码的正确性
2、链接相关的类库
3、编译相关代码
4、执行程序
对于不同的程序设计语言，上述四个步骤都是不一样的，但是，他们的执行流程是固定的，这类问题的解决方案就是我们本章要讲的模板方法模式

定义：
定义一个操作中的算法的框架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构即可重定义算法的某些特定步骤

使用场景：
1、多个子类有公共的方法，并且逻辑基本相同时。
2、重要、复杂的算法，可以把核心算法设计为模板方法，周边的相关细节功能则由各个子类实现
3、重构时，模板方法是一个经常使用的模式，把相同的代码抽取到父类中，然后通过钩子函数约束其行为

优点：
封装不变部分，扩展可变部分
提取公共部分代码，便于维护

缺点：
模板方法会带来代码阅读的难度，会让用户觉得难以理解