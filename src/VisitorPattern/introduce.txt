访问者模式：
访问者模式是一种将数据操作与数据结构分离的设计模式，他是设计模式中23中模式中最复杂的一个，但他的使用频率并不高，正如《设计模式》的作者GOF对访问者模式的描述：大多数情况下，
你并不需要访问者模式，但是当你一旦需要使用它时，那你就是真的需要它了。
访问者模式的基本想法是，软件系统中拥有一个由许多对象构成的、比较稳定的对象结构，这些对象的类拥有一个accept方法用来接收访问者对象的访问。访问者是一个接口，他拥有一个visit
方法，这个方法对访问到的对象结构中不同类型的元素做出不同的处理。在对象结构的一次访问过程中，我们遍历整个对象结构，对每一个元素都实施accept方法，在每一个元素的accept方法中
会调用访问者的visit方法，从而使访问者得以处理对象结构的每一个元素，我们可以针对对象结构设计不同的访问者类来完成不同的操作，达到区别对待的效果。

定义:
封装一些作用于某种数据结构中的各元素的操作，它可以在不改变这个数据结构的前提下定义作用于这些元素的新的操作。

使用场景：
1、对象结构比较稳定，但经常需要在此对象结构上定义新的操作。
2、需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免这些操作“污染”这些对象的类，也不希望在增加新的操作时修改这些类。

优点：
各角色职责分离，符合单一职责原则
具有优秀的扩展性
使得数据结构和作用于结构上的操作解耦，使得操作集合可以独立变化
灵活

缺点：
具体元素对访问者公布细节，违反了迪米特原则
具体元素变更时导致修改成本大
违反了依赖倒置原则，为了达到“区别对待”而依赖了具体类，没有依赖抽象